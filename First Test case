//First Test Case
#include <iostream>
#include <map>
#include <vector>
#include <cmath>
#include <sstream>

// Function to convert a string in a specific base to an integer
long long decodeValue(const std::string& value, int base) {
    long long decoded = 0;
    
    for (char digit : value) {
        int numValue;
        if (digit >= '0' && digit <= '9')
            numValue = digit - '0';
        else
            numValue = digit - 'A' + 10;
        
        decoded = decoded * base + numValue;
    }
    
    return decoded;
}

// Optimized Lagrange Interpolation function with precision
long double lagrangeInterpolation(const std::vector<std::pair<int, long long>>& points, int k) {
    long double constantTerm = 0.0;

    // Perform interpolation to find P(0), i.e., the constant term c
    for (int i = 0; i < k; ++i) {
        long double numerator = 1;
        long double denominator = 1;

        // Compute the Lagrange basis polynomial L_i(0)
        for (int j = 0; j < k; ++j) {
            if (i != j) {
                numerator *= -points[j].first;  // P(0) evaluates to 0 - x_j for each j
                denominator *= (points[i].first - points[j].first);
            }
        }

        // Add the current term to the constant term, cast to ensure no precision loss
        constantTerm += (long double)(points[i].second) * numerator / denominator;
    }

    return constantTerm;
}

int main() {
    // Example input, can be replaced with file reading from a JSON file.
    std::map<int, std::pair<int, std::string>> input = {
        {1, {10, "4"}},
        {2, {2, "111"}},
        {3, {10, "12"}},
        {6, {4, "213"}}
    };

    // Step 1: Decode the values
    std::vector<std::pair<int, long long>> points;
    
    for (const auto& [x, base_value] : input) {
        int base = base_value.first;
        std::string value = base_value.second;
        long long decodedY = decodeValue(value, base);
        points.push_back({x, decodedY});
        
        // Debugging: Print the decoded (x, y) points
        std::cout << "Decoded point: (" << x << ", " << decodedY << ")" << std::endl;
    }

    // Step 2: Use Lagrange Interpolation to find the constant term (c)
    long double constantTerm = lagrangeInterpolation(points, points.size());

    // Step 3: Output the result with high precision
    std::cout << "The constant term (c) is: " << constantTerm << std::endl;

    return 0;
}
