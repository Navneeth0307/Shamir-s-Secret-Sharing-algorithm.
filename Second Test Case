//Second Test Case
#include <iostream>
#include <map>
#include <vector>
#include <cmath>
#include <sstream>

// Function to convert a string in a specific base to an integer
long long decodeValue(const std::string& value, int base) {
    long long decoded = 0;
    for (char digit : value) {
        int numValue;
        if (digit >= '0' && digit <= '9')
            numValue = digit - '0';
        else
            numValue = digit - 'A' + 10;  // Handle hexadecimal digits (A-F)
        decoded = decoded * base + numValue;
    }
    return decoded;
}

// Optimized Lagrange Interpolation function
long long lagrangeInterpolation(const std::vector<std::pair<int, long long>>& points, int k) {
    long long constantTerm = 0;

    // Perform interpolation to find P(0), i.e., the constant term c
    for (int i = 0; i < k; ++i) {
        long long numerator = 1;
        long long denominator = 1;

        // Compute the Lagrange basis polynomial L_i(0)
        for (int j = 0; j < k; ++j) {
            if (i != j) {
                numerator *= -points[j].first;  // P(0) evaluates to 0 - x_j for each j
                denominator *= (points[i].first - points[j].first);
            }
        }

        // Add the current term to the constant term
        constantTerm += points[i].second * numerator / denominator;
    }

    return constantTerm;
}

int main() {
    // Test case input
    std::map<int, std::pair<int, std::string>> input = {
        {1, {10, "28735619723837"}},
        {2, {16, "1A228867F0CA"}},
        {3, {12, "32811A4AA0B7B"}},
        {4, {11, "917978721331A"}},
        {5, {16, "1A22886782E1"}},
        {6, {10, "28735619654702"}},
        {7, {14, "71AB5070CC4B"}},
        {8, {9, "122662581541670"}},
        {9, {8, "642121030037605"}}
    };

    // Step 1: Decode the values
    std::vector<std::pair<int, long long>> points;
    
    for (const auto& [x, base_value] : input) {
        int base = base_value.first;
        std::string value = base_value.second;
        long long decodedY = decodeValue(value, base);
        points.push_back({x, decodedY});
        
        // Debugging: Print the decoded (x, y) points
        std::cout << "Decoded point: (" << x << ", " << decodedY << ")" << std::endl;
    }

    // Step 2: Use Lagrange Interpolation to find the constant term (c)
    long long constantTerm = lagrangeInterpolation(points, 6);

    // Step 3: Output the result
    std::cout << "The constant term (c) is: " << constantTerm << std::endl;

    return 0;
}
